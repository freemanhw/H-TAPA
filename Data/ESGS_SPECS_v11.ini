[VERINFO]
SWVER = 0.0
INIVER = 0.0

########################################################################################################################
# Version Information
# Reluctantly implemented with a long string. Indent necessary.
# (Multiline comment is not supported in configparser.py)

CONFIGINFO = " ; Start of Version Description. Opening quotation necessary.

    This .ini file defines the specific satellite configuration used for the ADCS performance analysis.

    Date:       2020-01-28
    Author:     H. Roh
    Project:    ESGS
    Version:    v11
    Milestone:  after ESDDR

    Reference Documents:
        - Mass Property Rev 3.0 (MOI, +10% margin applied to the reference)
        - ACS Requirement Analysis Rev 2.0 (Sensor Specs, Master)
        - Geolocation and Geopointing Accuracy Analysis Rev 1.0 (Sensor Specs, Slave)
        - Alignment Definition Table (To be uploaded. No official document available)

    Change Log:
        - Succeeds ESGS_SPECS_v10.ini (2020-01-28)
        - Updated Mass / MOI based on Rev 3.0
        - Updated STS mounting angles based on ACS Req. Analysis Rev 2.0
        - Updated Gyro Misalignment (left only nonorthogonal misalignment, according to PAD model)

    Note:
        - Some constants succeed the simulation condition from DM2 modelsim.
        - Some sensor specifications do not comply between ACS Req. Analysis versus Geoloc. Analysis.
        - In case of nonconformance, ACS Req. overrides the Geoloc. analysis.

    " ; End of Version Description. The trailing (tab + quotation mark) is necessary.
########################################################################################################################


[MECHANICAL_PROPERTY]
Mass = 373.09  ; kg

# Before SP deployment

# After SP deployment
MOI_xx = 135.366 ; kg x m^2
MOI_xy = 0.385 ;
MOI_xz = -0.088 ;
MOI_yy = 135.52 ;
MOI_yz = 0.198 ;
MOI_zz = 75.009 ;
Margin = 0.0  ; Percent, Margin for MOI and Mass

[CONST]
D2R = (3.141592653589793/180.0)
R2D = (180.0/3.141592653589793)

[GPS]
noise_pos_ecef = np.array([10*1e-3]*3)*0 ; gps pos noise in km, 1sigma
noise_vel_ecef = np.array([0.01*1e-3]*3)*0 ; gps vel noise in km, 1sigma

[GYRO] ; Single Gyro Specification

n = 3  ; The number of Gyro

; noise set to zero for test purpose
ARW = 0.002 / 3.0 / 60 * ${CONST:D2R} ; deg/sqrt(hr), 1 sigma
BS = 0.01 / 3.0 / 3600 * ${CONST:D2R} ; deg/hr, 1 sigma
BR = 0.03 / 3.0 / 3600 * ${CONST:D2R} ; deg/sqrt(hr), 1 sigma
RRW = 3.0**0.5 / 2.0 * (${BS})**2 / (${ARW}) ; Rate Random Walk, 1 sigma
NominalSSF = 0.0 / 100 ; Nominal (best knowledge) symmetric (linear) scale factor (percent)
TrueSSF = 0.001 / 100 ; True symmetric scale factor (percent)


UpdateRate = 8 ; Hz ; set gyro update rate less than the simulation rate
lenBuffer = 2 ; Number of Measurement Stored in Buffer, add 1 to average measures

[GRA] ; Gyro Assembly Configuration (Mounting Angle and etc.)

; Nominal (best knowledge) Gyro alignment, unit vector
NomAlign1 = np.array([0.33418362760966, 0.94249420569739, 0.00509659341979])
NomAlign2 = np.array([0.32654898000960, -0.47170738985765, 0.81905915659882])
NomAlign3 = np.array([0.33990820144964, -0.46545375472083, -0.81719961870008])
; True Gyro misalignment, Euler 3-2-1 deg
MisAlign1 = np.array([0.000, 0.000, 0.000]) * ${CONST:D2R}
MisAlign2 = np.array([0.000, 0.000, 0.001]) * ${CONST:D2R}
MisAlign3 = np.array([0.000, 0.001, -0.001]) * ${CONST:D2R}


[STS] ; Single Star Tracker Specification

n = 2  ; The number of STSs
isDualMode = 1  ; Dual STS mode flag; 0 = single, 1 = dual

; Dual STS mode start
DualUpdateRate = 4  ; STS update rate (Hz)
DualTimeDelay = 0.1  ; STS output time delay (sec)
DualLatSigma = 4.0  / 3600 * ${CONST:D2R} ; XY noise, 1-sigma (arcsec)
DualYawSigma = 4.0  / 3600 * ${CONST:D2R} ; Z noise, 1-sigma (arcsec)
; Dual STS mode end

; Single STS mode start
SingleUpdateRate = 8  ; STS update rate (Hz)
SingleTimeDelay = 0.05  ; STS output time delay (sec)
SingleLatSigma = 4.0 / 3600 * ${CONST:D2R} ; XY noise, 1-sigma (arcsec)
SingleYawSigma = 32.0 / 3600 * ${CONST:D2R} ; Z noise, 1-sigma (arcsec)
; Single STS mode end

UpdateRate = ${DualUpdateRate}
TimeDelay = ${DualTimeDelay}
LatSigma = ${DualLatSigma}
YawSigma = ${DualYawSigma}

LowFreqError_Amplitude = 3.0  / 3600 * ${CONST:D2R} ; Amplitude (maximum) of the low-frequency error (arcsec)
ThermalDeflection_Frequency = 0.00116355  ; period (frequncy) of low-frequncy error (rad/s)

NominalPerformanceRate = 1.0 * ${CONST:D2R} ; Angular Rate Limit for Nominal Performance (deg/s)
MaxRate = 2.0 * ${CONST:D2R} ; Angular Rate Limit for STS operation (deg/s)
MaxRateDegradation = 2.0 ; Degradation Coefficient at the max rate. i.e. latsigma(w_max) = 2.0 * latsigma(w_norm)

[STA] ; Star Tracker Assembly Configuration (Mounting Angle and etc.)

NomAlign1 = np.array([0.0, 132.8, 126.8]) * ${CONST:D2R} ; Nominal (best knowledge) alignment, Euler 3-2-1 deg
NomAlign2 = np.array([0.0, 132.8, 53.2]) * ${CONST:D2R}
NomAlign3 = np.array([0.0, 150.0, -90.0]) * ${CONST:D2R}

MisAlign1 = np.array([0.001, 0.001, -0.001]) * ${CONST:D2R} ; True misalignment, Euler 3-2-1 deg
MisAlign2 = np.array([-0.001, -0.001, 0.001]) * ${CONST:D2R}
MisAlign3 = np.array([-0.001, -0.001, 0.001]) * ${CONST:D2R}



[FCS] ; common FCS params
UpdateRate = 8 ; FCS op freq.

[AC] ; AC algorithm config

; controller internal status, plz set this using guidance module later
ScenarioStart = 1
qDesired = np.array([0.5, 0.0, 0.0, 0.86602540378443871]) ; set this for large angle maneuver test
wDesired = np.array([0.0, 0.0, 0.0])

; controller settings
K = 1.02  ; Proportional control gain
D = 1.002  ; Differential control gain
ControlRate =${FCS:UpdateRate}

; nominal info
MoI = np.array([[ 1.28887e+02, -6.60000e-02, -2.20000e-02], [-6.60000e-02,  1.32484e+02,  5.50000e-01], [-2.20000e-02,  5.50000e-01,  7.32160e+01]])

[AD] ; AD algorithm config
; initial guess
P = np.eye(6) * np.diag(np.repeat([9.401772215639154e-09, 6.5290084830827456e-15], 3)) ; covariance
P0 = np.eye(6) * np.diag(np.repeat([9.401772215639154e-09, 6.5290084830827456e-15], 3)) ; covariance

q = np.array([0.0001, 0, 0, 0.9999]) ; quaternion
b = np.zeros(3) ; Gyro bias

; set control rate
UpdateRate =${FCS:UpdateRate}

[RW] ; Single Reaction Wheel Specification

MaxTorque = 0.195   ; Maximum torque (Nm)
MaxSpeed = 2000.0   ; Maximum wheel speed (RPM)
TorqueEnvelope_Slope = 0.0  ; Torque Envelope slope, x-axis speed, y-axis max. torque (Nm/RMP)
TorqueEnvelope_TiltingPoint = 0.0   ; Max. torque decreases from this point with a slope (RMP)
SpeedReadNoise = 5.0    ; Wheel speed read noise, 1-sigma
MoI = 0.01944   ; Wheel disk moment of inertia, (kgm^2)
NumberOfRW = 4   ; The number of RWs

RwDynamicsOn = 0 ; 2nd dynamics on or off (1-on  / 0 - off)


WheelSpeed = np.array([350.0, -350.0, 350.0, -350.0])   ; Initial wheel speed, RPM
WheelSpeedDot = np.array([0.0, 0.0, 0.0, 0.0])  ; Time differential of the wheel speed, RPM/s
Momentum = np.array([0.0, 0.0, 0.0, 0.0])   ; Angular momentum of each RW
; RW modeling parameters
t1 = 18.0 * 1e-3    ; 1st time lag, seconds
t2 = 1.1 * 1e-3     ; 2nd time lag, seconds
SF = 0.0    ; RW command-true torque scalar factor
DeadTimeOn = 0 ; Deadtime due to torque direction change on or off (1-on  / 0 - off)
ImpulseComp = 0 ; Impulse compensation for Deadtime effect (1-on  / 0 - off) (http://192.168.20.159:8090/x/NUAhBg)
TDC = 3.0 * 1e-3  ; TDC (Torque Direction Change) delayed time (rigorous definition is required...), seconds (explained in 3.1.7 RSI 4-215/203)
;TDC is not that important its effect is negligible
TLoss = 0.02    ; Torque loss, Nm
DeadTime = 0.22     ; Dead time for TDC, seconds
RWCmdDiscreteness = 65536   ; The number of RW command discreteness (AD convert)
RWTorqueResolution = self.MaxTorque * 2.0 / self.RWCmdDiscreteness    # RW torque cmd resolution

[RWA] ; Reaction Wheel Array
NomAlign1 = np.array([-0.6830127019, -0.6830127019, -0.2588190451]) ; Nominal (best knowledge) RW alignment, Unit vector
NomAlign2 = np.array([-0.6830127019, 0.6830127019, -0.2588190451])
NomAlign3 = np.array([0.6830127019, 0.6830127019, -0.2588190451])
NomAlign4 = np.array([0.6830127019, -0.6830127019, -0.2588190451])

MisAlign1 = np.array([0.0, 0.0, 0.0])*np.pi/180.0   ; Misalignment, Euler 3-2-1 degree
MisAlign2 = np.array([0.0, 0.0, 0.0])*np.pi/180.0
MisAlign3 = np.array([0.0, 0.0, 0.0])*np.pi/180.0
MisAlign4 = np.array([0.0, 0.0, 0.0])*np.pi/180.0
TrueAlign = np.zeros((3,self.NumberOfRW))
TruePseudoInverse = self.CalTrueAlign()
